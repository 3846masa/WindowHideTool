#module

/*-----画像比較処理-----*/
/* 参照:http://hspdev-wiki.net/?As */

//比較除外色の情報をすべてクリア
#deffunc imghclsdel
dim IMGHCOLOR,1:return
 
//	比較する対象から除外する色を指定
//  imghclsadd R,G,B
#deffunc imghclsadd int p1, int p2, int p3
if IMGHCOLOR=0{sdim IMGHCOLOR,64,0:IMGHCOLOR.(length(IMGHCOLOR)-1)=""+p1+","+p2+","+p3
}else{:IMGHCOLOR.(length(IMGHCOLOR))=""+p1+","+p2+","+p3:}:return

//imgh 比較範囲X, 比較範囲Y, 比較元画像情報が入った変数,比較先画像情報が入った変数,曖昧さ
//比較元画像変数名 = 画像があるバッファID, 左上X、左上Y
//画像の相似率が％で帰ります。
#defcfunc imgh int p1,int p2,array p3, array p4,int p5
s2=ginfo(3):s8=0:gsel p3:mref s1,66:s11=ginfo_winx:s12=ginfo_winy:gsel p4:mref s9,66:s13=ginfo_winx
s14=ginfo_winy:gsel s2:if (""+p3(0)+","+p3(1)+","+p3(2))!IMGHROOT{IMGHROOT=""+p3(0)+","+p3(1)+","+p3(2)
s4=0:dim IMGHROOTTOP,p1+1,p2+1,3:gsel p3(0):repeat p2:s3=0:repeat p1:s10=((s12-1-(s4+p3(2)))*s11+(s3+p3(1)))*3
IMGHROOTTOP.s3.s4.0=peek(s1,s10+2):IMGHROOTTOP.s3.s4.1=peek(s1,s10+1):IMGHROOTTOP.s3.s4.2=peek(s1,s10)
s3+:loop:s4+:loop}gsel p4(0):s4=0:s5=1:repeat p2:s3=0:repeat p1:s7=0:foreach IMGHCOLOR
if (""+IMGHROOTTOP.s3.s4.0+","+IMGHROOTTOP.s3.s4.1+","+IMGHROOTTOP.s3.s4.2)=IMGHCOLOR.cnt{s7=1}loop
if s7!1{s10=((s14-1-(s4+p4(2)))*s13+(s3+p4(1)))*3:s15=peek(s9,s10+2):s16=peek(s9,s10+1):s17=peek(s9,s10)
s7=0:foreach IMGHCOLOR:if (""+s15+","+s16+","+s17)=IMGHCOLOR(cnt){s7=1}loop:if s7!1{
if (absf(IMGHROOTTOP(s3,s4,0)-s15)<=p5)&(absf(IMGHROOTTOP(s3,s4,1)-s16)<=p5)&(absf(IMGHROOTTOP(s3,s4,2)-s17)<=p5){s8+}else{s5=0} }else{
s8+} }else{s8+}s3+:loop:s4+:loop:gsel s2:s8=double(s8)/double((p1*p2)):return s8
/*-----画像比較処理-----*/

/*-----六角形描画処理-----*/
#deffunc hexagon double R,array O
	lambda = (360/6)
	pos O(0)+R,O(1)
	for deg,lambda,360+lambda,lambda
		line O(0)+(R*cos(deg2rad(deg))),O(1)+(R*sin(deg2rad(deg)))
	next
	return
/*-----六角形描画処理-----*/

#global

/*-----デスクトップ画像キャプチャプラグイン-----*/
#uselib "gdi32.dll"
#cfunc CreateDC "CreateDCA" sptr,sptr,sptr,int
#func DeleteDC "DeleteDC"  int
#func BitBlt "BitBlt" int,int,int,int,int,int,int,int,int
#func  GetTextExtentPoint32 "GetTextExtentPoint32A" int,int,int,int
/*-----デスクトップ画像キャプチャプラグイン-----*/

#include "keyhook.hsp" // キーフック実装DLL:http://tu3.jp/
#include "user32.as" // Win32APIの利用
#include "hscallbk.as" // コールバック関数実装プラグイン for HSP3:http://chokuto.ifdef.jp/
#include "ds_play.as" // DirectSound再生プラグイン for HSP:http://www.binzume.net/
#include "hspdsc.as" // DirectShowベースキャプチャデバイスプラグイン:http://homepage2.nifty.com/MJHS/

/*-----コールバック用設定-----*/
; コールバック関数の関数形式を定義
; ( DLL名および関数名はダミー (空文字列) )
; ( int, double, str, comobj 型引数のみ指定可能 )
#uselib ""
#func EnumWindowProc "" int,int

#define NULL        0
#define SRCCOPY     0x00CC0020
#define CAPTUREBLT  0x40000000
/*-----コールバック用設定-----*/

/*-----枠なしウィンドウ用変数-----*/
#define WM_NCLBUTTONDOWN $000000A1
#define HTCAPTION 2
#define HTMINBUTTON 8
/*-----枠なしウィンドウ用変数------*/

/*-----サウンド初期化-----*/
// ds_play.as 利用
ds_init
;onexit gosub *exit
ds_open 1,dir_cur+"/sound/motor_loop.wav"
ds_open 2,dir_cur+"/sound/motor_end.wav"
ds_open 3,dir_cur+"/sound/error.wav"
ds_open 5,dir_cur+"/sound/bgm.wav"
ds_setvol 5,9000
/*-----サウンド初期化-----*/

/*-----タイトル設定-----*/
title "WindowHideTool by M.M"
/*-----タイトル設定-----*/

/*-----初期設定-----*/
;メイン画面を初期化
;screen 0
;終了処理を設定
onexit goto *exit
;判定パーセンテージ
;画像比較の変化率が上回ると動作
flag = 0.01
/*-----初期設定-----*/

/*-----CVバッファ(カメラ利用)初期設定-----*/
;CVバッファを初期化
dsc_Init
;カメラデバイスの取得
sdim name,1024
;利用可能なデバイスの数を取得
dsc_GetDeviceList name
if stat=0 : dialog "デバイスが見つかりません" : end
/*-----CVバッファ(カメラ利用)初期設定-----*/

/*-----初期画面-----*/
phase = 0 ;段階変数
// Window作成
bgscr 0,240,160,0,double(ginfo_dispx-240)/2,double(ginfo_dispy-160)/2
redraw 0
color 0:boxf:pos 0,50;:button "終了",*exit
gsel 0,1
color 230,170,15	: boxf 0, 0, ginfo(12), 25
color 0				: boxf 2, 2, ginfo(12)-2, 25-3
color 230,170,15	: boxf 0, 25, ginfo(12), ginfo(13)
color 0				: boxf 2, 25+2, ginfo(12)-3, ginfo(13)-3
color 230,170,15	: boxf ginfo(12)-25*2, 0, ginfo(12)-25*1, 25
color 0				: boxf ginfo(12)-25*2+2, 18, ginfo(12)-25*1-2, 20
color 230,170,15	: boxf ginfo(12)-25*1, 0, ginfo(12)-25*0, 25
color 0				: pos ginfo(12)-25*1+5,0: font "ＭＳ Ｐゴシック", 25 : mes "Ｘ"
onclick gosub *clickBranch
;onexit gosub *exit

// ボタン作成
redraw 0
color 230,170,15
moji = "WINDOW HIDE TOOL"
font "HGP教科書体",25,1
ls=strlen(moji) : dim size,2
GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
x = size(0) : y = size(1)
tx = double(ginfo(12)-x)/2 : ty = double(ginfo(13))/2
pos tx,40 : mes moji

color 230,170,15:boxf 30,70,ginfo(12)-30,100
color 0
moji = "Booting Software"
posx = 30
boxH = 30
font "HGP教科書体",27,17
ls=strlen(moji) : dim size,2
GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size) ; 文字の幅と高さを取得
x = size(0) : y = size(1)
tx = double(ginfo(12)-x)/2 : ty = 70+double(boxH-y)/2 ; 描画位置を設定(文字が中央揃えになるよう)
pos tx,ty : mes moji

color 230,170,15:boxf 30,110,ginfo(12)-30,140
color 0
moji = "Testing EVA mode"
posx = 30
boxH = 30
font "HGP教科書体",25,17
ls=strlen(moji) : dim size,2
GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size) ; 文字の幅と高さを取得
x = size(0) : y = size(1)
tx = double(ginfo(12)-x)/2 : ty = 110+double(boxH-y)/2 ; 描画位置を設定(文字が中央揃えになるよう)
pos tx,ty : mes moji

redraw 1

repeat
	getkey key, 66
       if key == 1 : goto *booting
       getkey key, 84
       if key == 1 : goto *hide_eva
	await
loop
stop
/*-----初期画面-----*/

/*-----カメラ選択画面-----*/
*booting
	phase = 1
	
	// Window作成
	bgscr 0,240,160,0,double(ginfo_dispx-240)/2,double(ginfo_dispy-160)/2
	redraw 0
	cls
	color 0:boxf:pos 0,50;:button "終了",*exit
	gsel 0,1
	color 230,170,15	: boxf 0, 0, ginfo(12), 25
	color 0				: boxf 2, 2, ginfo(12)-2, 25-3
	color 230,170,15	: boxf 0, 25, ginfo(12), ginfo(13)
	color 0				: boxf 2, 25+2, ginfo(12)-3, ginfo(13)-3
	color 230,170,15	: boxf ginfo(12)-25*2, 0, ginfo(12)-25*1, 25
	color 0				: boxf ginfo(12)-25*2+2, 18, ginfo(12)-25*1-2, 20
	color 230,170,15	: boxf ginfo(12)-25*1, 0, ginfo(12)-25*0, 25
	color 0				: pos ginfo(12)-25*1+5,0: font "ＭＳ Ｐゴシック", 25 : mes "Ｘ"
	onclick gosub *clickBranch
	;onexit gosub *exit
	
	color 230,170,15
	moji = "SELECT CAM DEVICE"
	font "HGP教科書体",25,1
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
	x = size(0) : y = size(1)
	tx = double(ginfo(12)-x)/2 : ty = double(ginfo(13))/2
	pos tx,40 : mes moji
	
	// ボタン作成
	;name = "HSP\ncombox\nコンボボックス\nスクリプト" //テスト用変数
	pos 30,70
	font "HGP教科書体",20,1
	objmode 2
	objsize ginfo(12)-30*2,30 ;サイズを指定
	combox id,100,name ;コンボボックスを作成
	objsel stat
	/*
	color 230,170,15:boxf 30,70,ginfo(12)-30,100
	color 0
	moji = "____"
	posx = 30
	boxH = 30
	font "HGP教科書体",30,17
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size) ; 文字の幅と高さを取得
	x = size(0) : y = size(1)
	tx = double(ginfo(12)-x)/2 : ty = 70+double(boxH-y)/2 ; 描画位置を設定(文字が中央揃えになるよう)
	pos tx,ty : mes moji
	*/
	
	color 230,170,15:boxf 30,110,ginfo(12)-30,140
	color 0
	moji = "Select CAM"
	posx = 30
	boxH = 30
	font "HGP教科書体",25,17
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size) ; 文字の幅と高さを取得
	x = size(0) : y = size(1)
	tx = double(ginfo(12)-x)/2 : ty = 110+double(boxH-y)/2 ; 描画位置を設定(文字が中央揃えになるよう)
	pos tx,ty : mes moji
	
	redraw 1
	
	repeat
		stick key, 0
		if key&32 : goto *alertDialog
		await
	loop
	
	stop
/*-----カメラ選択画面-----*/

/*-----警告-----*/
*alertDialog
	gsel 0,-1
	// Window作成
	bgscr 6,280,205,0,double(ginfo_dispx-280)/2,double(ginfo_dispy-205)/2
	gsel 6,2
	redraw 0
	color 0:boxf:pos 0,50;:button "終了",*exit
	gsel 6,1
	color 237,57,60	: boxf 0, 0, ginfo(12), ginfo(13)
	color 0				: boxf 2, 2, ginfo(12)-3, ginfo(13)-3
	onclick gosub *clickBranchDialog
	
	color 237,57,60	: boxf 0, 0, ginfo(12), 25
	repeat
		color 0
		if (cnt\20 >= 10):line 3+cnt,0,3+cnt-10,25
		if (cnt-6 >= ginfo(12)-10):break
	loop
	
	color 237,57,60	: boxf 0, ginfo(13)-25, ginfo(12), ginfo(13)
	repeat
		color 0
		if (cnt\20 >= 10):line 3+cnt, ginfo(13)-25-3, 3+cnt-10, ginfo(13)-3
		if (cnt-6 >= ginfo(12)-10):break
	loop
	
	color 237,57,60
	moji = "警告"
	font "HGP教科書体",50,17
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size) ; 文字の幅と高さを取得
	x = size(0) : y = size(1)
	tx = double(ginfo(12)-x)/2 : ty = 30 ; 描画位置を設定(文字が中央揃えになるよう)
	pos tx,ty : mes moji
	
	color 237,57,60
	moji = "窓格納後、復帰スルニハ"
	font "HGP教科書体",25,17
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size) ; 文字の幅と高さを取得
	x = size(0) : y = size(1)
	tx = double(ginfo(12)-x)/2 : ty = 85 ; 描画位置を設定(文字が中央揃えになるよう)
	pos tx,ty : mes moji
	
	color 237,57,60
	moji = "\"ESC\"キーヲ数秒押下セヨ"
	font "HGP教科書体",25,17
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size) ; 文字の幅と高さを取得
	x = size(0) : y = size(1)
	tx = double(ginfo(12)-x)/2
	pos tx, : mes moji
	
	color 237,57,60:boxf 30,ginfo(13)-65,ginfo(12)-30,ginfo(13)-35
	color 0
	moji = "了承"
	posx = 30
	boxH = 30
	font "HGP教科書体",30,17
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size) ; 文字の幅と高さを取得
	x = size(0) : y = size(1)
	tx = double(ginfo(12)-x)/2 : ty = (ginfo(13)-65)+double(boxH-y)/2 ; 描画位置を設定(文字が中央揃えになるよう)
	pos tx,ty : mes moji
	
	redraw 1
	
	repeat
		stick key, 0
		if key&32 : goto *play
		await
	loop
	
	stop
	
*clickBranchDialog
	if wparam == 1 {
		// ボタン部分
		if ( (30 <= mousex && mousex <= ginfo(12)-30) && (ginfo(13)-65 <= mousey && mousey <= ginfo(13)-35) ){
			goto *play
		}
	}
	return
	
/*-----警告-----*/


/*-----カメラ調整-----*/
*play
	gsel 0,1
	gsel 6,-1
	onclick gosub *clickBranch
	phase = 2
	onkey gosub *SettingKey
	
	// Window作成
	bgscr 0,240,420,0,double(ginfo_dispx-240)/2,double(ginfo_dispy-420)/2
	redraw 0
	cls
	color 0:boxf:pos 0,50;:button "終了",*exit
	gsel 0,1
	color 230,170,15	: boxf 0, 0, ginfo(12), 25
	color 0				: boxf 2, 2, ginfo(12)-2, 25-3
	color 230,170,15	: boxf 0, 25, ginfo(12), ginfo(13)
	color 0				: boxf 2, 25+2, ginfo(12)-3, ginfo(13)-3
	color 230,170,15	: boxf ginfo(12)-25*2, 0, ginfo(12)-25*1, 25
	color 0				: boxf ginfo(12)-25*2+2, 18, ginfo(12)-25*1-2, 20
	color 230,170,15	: boxf ginfo(12)-25*1, 0, ginfo(12)-25*0, 25
	color 0				: pos ginfo(12)-25*1+5,0: font "ＭＳ Ｐゴシック", 25 : mes "Ｘ"
	onclick gosub *clickBranch
	;onexit gosub *exit
	
	gsel 0 ; メイン画面をアクティブ
	;cls ; 画面を初期化
	pos 0,30
	;button gosub "プロパティ",*prop ; カメラのプロパティを起動するボタン
	font "",12,16 ; フォントサイズを設定
	;mes "*カメラの前で動いても赤い円が表示されない場合\n　プロパティのガンマ値をいじって、映像を明るくしてください。"
	;dialog "ウィンドウを元に戻すには【ESCキーを長押し】です。\nそれでも戻らない場合は、同梱の[Recovery.exe]を起動して下さい。",1
	
	;gsel 0
	pos 0,50
	;button goto "SET CAM",*watch ; 通常モード起動ボタン
	;button goto "SET EVA",*watch_eva ; EVAモード起動ボタン
	
	color 230,170,15:boxf 30,40,ginfo(12)-30,70
	color 0
	moji = "Setting CAM"
	posx = 30
	boxH = 30
	font "HGP教科書体",25,17
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size) ; 文字の幅と高さを取得
	x = size(0) : y = size(1)
	tx = double(ginfo(12)-x)/2 : ty = 40+double(boxH-y)/2 ; 描画位置を設定(文字が中央揃えになるよう)
	pos tx,ty : mes moji
	
	color 237,57,60:boxf 30,80,ginfo(12)-30,110
	color 0
	moji = "Nomal mode"
	posx = 30
	boxH = 30
	font "HGP教科書体",25,17
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size) ; 文字の幅と高さを取得
	x = size(0) : y = size(1)
	tx = double(ginfo(12)-x)/2 : ty = 80+double(boxH-y)/2 ; 描画位置を設定(文字が中央揃えになるよう)
	pos tx,ty : mes moji
	
	color 237,57,60:boxf 30,120,ginfo(12)-30,150
	color 0
	moji = "EVA mode"
	posx = 30
	boxH = 30
	font "HGP教科書体",25,17
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size) ; 文字の幅と高さを取得
	x = size(0) : y = size(1)
	tx = double(ginfo(12)-x)/2 : ty = 120+double(boxH-y)/2 ; 描画位置を設定(文字が中央揃えになるよう)
	pos tx,ty : mes moji
	
	count = 0 ; フレーム数
	
	maxpercent = 0.0

	// カメラ起動チェック
	;playflag = 0 ;起動フラグ(カメラが無事に起動したか確認)
	dsc_SetActiveSel 0 ; カメラ描画する画面設定
	dsc_Open id ; カメラを起動
	if stat<0 : dialog "エラーが発生しました。",1,"DEVICE-ERROR" : end
	gsel 0,0 ; メイン画面をアクティブ
	dsc_ReSize hwnd,10,100,360,240 ; カメラ映像をリサイズ
	dsc_play hwnd,30,160,ginfo(12)-30*2,double(ginfo(12)-30*2)/4*3 ; カメラ映像を再生
	if stat<0 : dialog "エラーが発生しました。",1,"CAPTURE-ERROR" : end
	;playflag=1 ; 起動フラグ オン
	
	// 画像を比較するために保存する仮想ウィンドウを作成
	buffer 3,320,240 : dim first, 3 : first = 3,0,0 ; 保存ウィンドウ1
	buffer 4,320,240 : dim second, 3 : second = 4,0,0 ; 保存ウィンドウ1
	buffer 5,dsc_CapX,dsc_CapY ; カメラ映像ウィンドウ
	
	goto *main ; 映像処理へ
	
/*-----ウィンドウボタン等判定-----*/
*clickBranch
	if wparam == 1 {
		// タイトルバー部分
		if (0 <= mousey && mousey <= 25){
			if (ginfo(12)-25*2 <= mousex && mousex < ginfo(12)-25*1){ // 最小化ボタン
				ShowWindow hwnd,$0002
			}else : if (ginfo(12)-25*1 <= mousex && mousex < ginfo(12)-25*0){ // 閉じるボタン
				goto *exit
			}else{ // それ以外の部分
				sendmsg hwnd,WM_NCLBUTTONDOWN,HTCAPTION,0
			}
		}
	
		// ボタン部分
		if (phase = 0){ // 初期画面
			if ( (30 <= mousex && mousex <= ginfo(12)-30) && (70 <= mousey && mousey <= 100) ){
				goto *booting
			}
			if ( (30 <= mousex && mousex <= ginfo(12)-30) && (110 <= mousey && mousey <= 140) ){
				wait 10:goto *hide_eva
			}
		}else : if (phase = 1){ // カメラ選択画面
			if ( (30 <= mousex && mousex <= ginfo(12)-30) && (110 <= mousey && mousey <= 140) ){
				goto *alertDialog
			}
		}else : if (phase = 2){ // カメラ設定画面
			if ( (30 <= mousex && mousex <= ginfo(12)-30) && (40 <= mousey && mousey <= 70) ){
				gosub *prop
			}
			if ( (30 <= mousex && mousex <= ginfo(12)-30) && (80 <= mousey && mousey <= 110) ){
				goto *watch
			}
			if ( (30 <= mousex && mousex <= ginfo(12)-30) && (120 <= mousey && mousey <= 150) ){
				goto *watch_eva
			}
		}
	
		
	}
	return
/*-----ウィンドウボタン等判定-----*/
	
/*-----カメラプロパティを起動--*/
*prop
	;if playflag=1{
		//再生中でないと失敗します。
		dsc_FilterProp  hwnd , "Device Filter"
	;}
	return
/*-----カメラプロパティを起動--*/

*main
	redraw 0
	gsel 0
	color 0: boxf 2, 2, ginfo(12)-2-25*2, 25-3: boxf 3,ginfo(13)/2,ginfo(12)-3,ginfo(13)-3
	count = count + 1 ; フレーム数をカウント
 
    x = 320 : y = 240 ; 映像の大きさ
    gsel 5 ; 映像用ウィンドウをアクティブ
    pos 0,0
    dsc_GetImage  hdc , 0 , 0 , dsc_CapX , dsc_CapY ; カメラ映像をキャプチャ
    redraw 1 ; 画面を即座に描画
    gsel 3+(count\2) ; フレーム数に応じて画像保存用ウィンドウ
    pos 0,0
    gzoom x,y,5,0,0,dsc_CapX,dsc_CapY-10,0 ; カメラ映像を保存
    await 10
 
	if (count = 1){
		imghclsdel ; 画像処理の初期化
		prepercent = imgh(ginfo(12),ginfo(13),first,second,10) ; 今のフレームと1フレーム前を比較
	}
	if (count >= 2){
		imghclsdel ; 画像処理の初期化
		percent = imgh(ginfo(12),ginfo(13),first,second,10) ; 今のフレームと1フレーム前を比較
		//変化率の差分が規定値より大きいかどうか
		if absf(percent-prepercent)>flag {
			result = "true" ; 変化あり
			// 変化があったか可視化
			gsel 0
			color 237,57,60
			boxf 30,ginfo(13)-50,ginfo(12)-30,ginfo(13)-20
	
			moji = "検出"
			font "HGP教科書体",50,17
			ls=strlen(moji) : dim size,2
			GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size) ; 文字の幅と高さを取得
			x = size(0) : y = size(1)
			tx = double(ginfo(12)-x)/2 : ty = ginfo(13)-y-60 ; 描画位置を設定(文字が中央揃えになるよう)
			pos tx,ty : mes moji
		}else{
			result = "false" ; 変化なし
			// 変化があったか可視化
			gsel 0
			color 230,170,15
			boxf 30,ginfo(13)-50,ginfo(12)-30,ginfo(13)-20
	
			moji = "監視"
			font "HGP教科書体",50,17
			ls=strlen(moji) : dim size,2
			GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size) ; 文字の幅と高さを取得
			x = size(0) : y = size(1)
			tx = double(ginfo(12)-x)/2 : ty = ginfo(13)-y-60 ; 描画位置を設定(文字が中央揃えになるよう)
			pos tx,ty : mes moji
		}
		gsel 0 ; メイン画面をアクティブ
		repeat
			color 0
			if (cnt\20 >= 10):line 30+cnt,ginfo(13)-50-2,30+cnt-10,ginfo(13)-20+2
			if (cnt-10 >= ginfo(12)-30*2):break
		loop
		pos 2,2
		color 230,170,15
		;title str(percent)+"::"+x+","+y+"::"+result+"::"+str(absf(percent-prepercent)) ; タイトルにログ表示
		moji = str(percent)+"::"+x+","+y+"::"+result+"::"+str(absf(percent-prepercent)) ; タイトルにログ表示
		font "HGP教科書体",10,17
		ls=strlen(moji) : dim size,2
		GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size) ; 文字の幅と高さを取得
		x = size(0) : y = size(1)
		tx = 3 : ty = double(25-y)/2 ; 描画位置を設定(文字が中央揃えになるよう)
		pos tx,ty : mes moji
		prepercent = percent ; 比較のため変化率を保存
	}
	
	await 10
	redraw 1
    goto *main ; ループ
 
/*-----カメラ調整-----*/

/*-----設定画面キー処理-----*/
*SettingKey
	if wparam==83 : goto *prop
	if wparam==78 : goto *watch
	if wparam==69 : goto *watch_eva
	return
/*-----設定画面キー処理-----*/

/*-----監視処理-----*/
*watch
	onclick 0
	onkey 0
	gsel 0,-1 ; メイン画面を不可視化
	count = count + 1 ; フレーム数をカウント
 
    x = 320 : y = 240 ; 映像の大きさ
    gsel 5 ; 映像用ウィンドウをアクティブ
    pos 0,0
    dsc_GetImage  hdc , 0 , 0 , dsc_CapX , dsc_CapY ; カメラ映像をキャプチャ
    redraw 1 ; 画面を即座に描画
    gsel 3+(count\2) ; フレーム数に応じて画像保存用ウィンドウ
    pos 0,0
    gzoom x,y,5,0,0,dsc_CapX,dsc_CapY-10,0 ; カメラ映像を保存
    await 10

	if (count = 1){
		imghclsdel ; 画像処理の初期化
		prepercent = imgh(ginfo(12),ginfo(13),first,second,10) ; 今のフレームと1フレーム前を比較
	}
	if (count >= 2){
		imghclsdel ; 画像処理の初期化
		percent = imgh(ginfo(12),ginfo(13),first,second,10) ; 今のフレームと1フレーム前を比較
		//変化率の差分が規定値より大きいかどうか
		if absf(percent-prepercent)>flag {
			result = "true" ; 変化あり
			goto *hide_system ; ウィンドウを消す処理へ
		}else{
			result = "false" ; 変化なし
		}
		prepercent = percent ; 比較のため変化率を保存
	}
	
    goto *watch ; ループ

/*-----監視処理-----*/

/*-----EVAモード設定-----*/ 
*watch_eva
	eva_mode = 1
	goto *watch
/*-----EVAモード設定-----*/ 

/*-----ウィンドウを消す一連の流れ(通常)-----*/
*hide_system
	dsc_Close ; カメラを停止
	if eva_mode == 1:goto *hide_eva ; EVAモードならば処理変更
	
	title "MAGISYSTEM-Beta"
	gsel 0,-1 ; メインウィンドウを不可視化
	
	// ウィンドウハンドルとそれらの座標を保存するために配列作成
	dim handle_num
	dim handle_posx
	dim handle_posy
	
	; コールバック関数の登録
	setcallbk Proc, EnumWindowProc, *OnEnumWindowProc
	
	; トップレベルウィンドウのハンドルを取得
	count = 0
	
	;トップレベルウィンドウのハンドルを取得
	EnumWindows varptr(Proc), 0
	
	gosub *WindowHide ; ウィンドウを消す処理へ
	
	;フックをセット(ボタンを押したら戻す処理へ行く設定)
	khHook *onKeyHook
	if stat=0 : dialog "フック失敗" : end
	stop
/*-----ウィンドウを消す一連の流れ(通常)-----*/

/*-----ウィンドウを消す一連の流れ(EVA)-----*/
*hide_eva	
	bgscr 0,ginfo_dispx,ginfo_dispy,2,0/*配置X*/,0/*配置Y*/ ; ウィンドウを枠なし全画面にする
	buffer 1,ginfo_dispx,ginfo_dispy ; デスクトップサイズの仮想ウィンドウを作成
	
	R = 100 ; 半径(六角形に接する円の半径)
	dim O,2 ; 中心の座標、（P,Q）と設定する
	
	// EMERGENCYの描画開始
	buffer 2 ; EMERGENCY描画用仮想ウィンドウ
	gsel 2 ; EMERGENCY描画用をアクティブ
	O = R,R ; 中心点を設定
	
	color 0,0,0 ; 黒色設定
	boxf ; 黒に塗りつぶす
	i = 0.0 ; Rと描画中の半径の差分
	
	repeat // 六角形の線を徐々に小さくしながら描いていく->塗りつぶされた六角形になる
		if (i>=5):color 237,57,60 ; 外側 5pxは赤色
		if (i>=10):color 0,0,0 ; 中間 5pxは黒色
		if (i>=15):color 237,57,60 ; 内側 5pxは赤色
		hexagon double(R)-i,O ; 六角形の線を描画
		await ; 処理落ち防止
		if (i>=R):break ; 中心点まで行ったら抜ける
		i = i + 0.01 ; 0.01px半径を縮める
	loop
	
	// EMERGENCYの文字描画
	color 0,0,0
	font "HGP平成角ｺﾞｼｯｸ体W9",31,0
	pos 24,85
	print "EMERGENCY"
	
	font "HGP平成角ｺﾞｼｯｸ体W9",50,16
	pos 73,30
	print "▲"
	pos 73,120
	print "▼"
	// EMERGENCYの描画終了
	
	// メインウィンドウを黒に初期化
	gsel 0,-1
	color 0,0,0
	boxf

	wait 100
	
	gsel 0,2 ; メインウィンドウを可視化
	
	gsel 1 ; 仮想ウィンドウに描画準備
	
	; デスクトップ画面のデバイスコンテキスト取得
	hdcScreen = CreateDC("DISPLAY", NULL, NULL, NULL)
	
	; デスクトップ画面の画像をコピー
	BitBlt hdc, 0, 0, ginfo_dispx, ginfo_dispy, hdcScreen, 0, 0, SRCCOPY | CAPTUREBLT
	
	; デバイスコンテキスト削除
	DeleteDC hdcScreen
	
	;描画ウィンドウを指定
	gsel 0
	
	;マウスカーソル不可視
	mouse -1
	
	;画面を黒にフェードアウト
	for alpha,255,0,-4
		redraw 0
		boxf
		gmode 3,ginfo_dispx,ginfo_dispy,alpha
		gcopy 1,0,0,ginfo_dispx,ginfo_dispy
		await 5
		redraw 1
	next
	
	wait 10
	
	ds_play 3,1 ; サウンド再生
	
	// EMERGENCYを点滅始まり
	alpha = 0
	for alpha,0,(180)*2/*(180)x回数*/,2/*速度*/
	
		gsel 0
		redraw 0
		color 0,0,0
		boxf
		gmode 4,R*2,R*2,absf(sin(deg2rad(alpha))*255)
		
		Q = 0
		repeat
		
			;2n-1行目
			P = -R/2;最初のX座標
			repeat
				O = P,Q-sqrt(3)*R/2;中心座標設定
				pos O(0)-R,O(1)-R
				gcopy 2,0,0
				if (P>ginfo(12)):break
				P = P+(R*3)
			loop	
		
			;2n行目
			P = R;最初のX座標
			repeat
				O = P,Q;中心座標設定
				pos O(0)-R,O(1)-R
				gcopy 2,0,0
				if (P>ginfo(12)):break
				P = P+(R*3)
			loop
			
			if (Q>ginfo(13)):break
			Q = Q+(sqrt(3)*R)
			
		loop
		
		redraw 1
		await
	next
	// EMERGENCYを点滅終わり
	
	ds_stop 3,1 ; サウンド再生
	ds_play 5,1 ; サウンド再生
	
	// EVA風グラフィックス描画処理
	boxf
	redraw 0
	
	color 230,170,15
	boxf 10,10,ginfo_dispx-10,ginfo_dispy-10
	
	color 0,0,0
	boxf 15,15,ginfo_dispx-15,ginfo_dispy-15
	
	color 230,170,15
	boxf 30,30,40,70
	boxf 50,30,60,70
	boxf ginfo_dispx-40,30,ginfo_dispx-30,70
	boxf ginfo_dispx-60,30,ginfo_dispx-50,70
	boxf 30,ginfo_dispy-70,40,ginfo_dispy-30
	boxf 50,ginfo_dispy-70,60,ginfo_dispy-30
	boxf ginfo_dispx-40,ginfo_dispy-70,ginfo_dispx-30,ginfo_dispy-30
	boxf ginfo_dispx-60,ginfo_dispy-70,ginfo_dispx-50,ginfo_dispy-30
		
	moji = "Blood Type = UNKNOWN"
	posx = 60
	repeat // ちょうどいいフォントサイズを調べる
		font "HGP教科書体",double(cnt)/100,16
		ls=strlen(moji) : dim size,2
		GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size) ; 文字の幅と高さを取得
		x = size(0) : y = size(1)
		if (ginfo_dispx-posx*2 <= x) {
			point = cnt
			break
		}
		await
	loop
	
	;if (eva_mode == 1){
		
	ds_open 4,dir_cur+"/voice/006.wav" ; ボイス読み込み
	ds_seek 4,0 ; 再生位置を最初にする
	ds_play 4,0 ; サウンド再生
	
	;}
	
	redraw 0
	
	moji = "Monitored Target Object"
	font "ＭＳ　Ｐゴシック",double(point-1)/(100*3),16
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size) ; 文字の幅と高さを取得
	x = size(0) : y = size(1)
	tx = double(ginfo_dispx-x)/2 : ty = double(ginfo_dispy)/4-y ; 描画位置を設定(文字が中央揃えになるよう)
	pos tx,ty : mes moji
	
	moji = "MAGI SYSTEM 1･2･3"
	font "ＭＳ　Ｐゴシック",double(point-1)/(100*3),16
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size) ; 文字の幅と高さを取得
	x = size(0) : y = size(1)
	tx = double(ginfo_dispx-x)/2 : ty = double(ginfo_dispy)*3/4 ; 描画位置を設定(文字が中央揃えになるよう)
	pos tx,ty : mes moji
	
	if (eva_mode == 1){
		
	// 変化のあった時の映像を取得して描画
	gsel 3+(count\2)
	x = ginfo(12) : y = ginfo(13)
	gsel 0
	; デザインに合うようリサイズ
	zoomx = double(ginfo_dispx-70*2)/x
	zoomy = (double(ginfo_dispy)/2-20)/y
	if (zoomx >= zoomy):zoomx = zoomy
	if (zoomx < zoomy):zoomy = zoomx
	pos double(ginfo_dispx-zoomx*x)/2,double(ginfo_dispy-zoomy*y)/2
	gzoom zoomx*x,zoomy*y,3+((count+1)\2),0,0,x,y,1
	
	}
	
	redraw 1
	
	if (eva_mode == 1):await 1800
	
	// 分析中と表示
	repeat
		redraw 0
		
		color 0,0,0
		boxf 61,61,ginfo_dispx-61,ginfo_dispy-61
		color 230,170,15
		
		if (cnt\2 = 1){
		
			moji = "Analysing ..."
			font "HGP教科書体",double(point-1)/100,16
			ls=strlen(moji) : dim size,2
			GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
			x = size(0) : y = size(1)
			tx = double(ginfo_dispx-x)/2 : ty = double(ginfo_dispy-y)/2
			pos tx,ty : mes moji
		}
		
		moji = "Monitored Target Object"
		font "ＭＳ　Ｐゴシック",double(point-1)/(100*3),16
		ls=strlen(moji) : dim size,2
		GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
		x = size(0) : y = size(1)
		tx = double(ginfo_dispx-x)/2 : ty = double(ginfo_dispy)/4-y
		pos tx,ty : mes moji
		
		moji = "MAGI SYSTEM 1･2･3"
		font "ＭＳ　Ｐゴシック",double(point-1)/(100*3),16
		ls=strlen(moji) : dim size,2
		GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
		x = size(0) : y = size(1)
		tx = double(ginfo_dispx-x)/2 : ty = double(ginfo_dispy)*3/4
		pos tx,ty : mes moji
		
		redraw 1
		await 150
		
		if (cnt >= 25):break
		
	loop
	
	// パターン不明と表示
	redraw 0
	
	color 0,0,0
	boxf 61,61,ginfo_dispx-61,ginfo_dispy-61
	color 230,170,15
	
	moji = "Blood Type = UNKNOWN"
	font "HGP教科書体",double(point-1)/100,16
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
	x = size(0) : y = size(1)
	tx = double(ginfo_dispx-x)/2 : ty = double(ginfo_dispy)/2
	pos tx,ty : mes moji
	
	moji = "Pattern Analysis:"
	font "HGP教科書体",double(point-1)/100,16
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
	x = size(0) : y = size(1)
	tx = double(ginfo_dispx-x)/2 : ty = double(ginfo_dispy)/2-y
	pos tx,ty : mes moji
	
	moji = "Monitored Target Object"
	font "ＭＳ　Ｐゴシック",double(point-1)/(100*3),16
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
	x = size(0) : y = size(1)
	tx = double(ginfo_dispx-x)/2 : ty = double(ginfo_dispy)/4-y
	pos tx,ty : mes moji
	
	moji = "MAGI SYSTEM 1･2･3"
	font "ＭＳ　Ｐゴシック",double(point-1)/(100*3),16
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
	x = size(0) : y = size(1)
	tx = double(ginfo_dispx-x)/2 : ty = double(ginfo_dispy)*3/4
	pos tx,ty : mes moji
	
	redraw 1
	
	// ボイスを再生
	ds_open 4,dir_cur+"/voice/008.wav"
	ds_seek 4,0
	ds_play 4,0
	
	wait 500
	
	// 第一種戦闘配置の表示
	redraw 0
	
	color 0,0,0
	boxf
	
	color 237,57,60
	boxf 10,10,ginfo_dispx-10,ginfo_dispy-10
	
	color 0,0,0
	boxf 15,15,ginfo_dispx-15,ginfo_dispy-15
	
	color 237,57,60
	boxf 30,30,40,70
	boxf 50,30,60,70
	boxf ginfo_dispx-40,30,ginfo_dispx-30,70
	boxf ginfo_dispx-60,30,ginfo_dispx-50,70
	boxf 30,ginfo_dispy-70,40,ginfo_dispy-30
	boxf 50,ginfo_dispy-70,60,ginfo_dispy-30
	boxf ginfo_dispx-40,ginfo_dispy-70,ginfo_dispx-30,ginfo_dispy-30
	boxf ginfo_dispx-60,ginfo_dispy-70,ginfo_dispx-50,ginfo_dispy-30
	
	moji = "CONDITION  I "
	font "HGP教科書体",double(point-1)/100,16
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
	x = size(0) : y = size(1)
	tx = double(ginfo_dispx-x)/2 : ty = double(ginfo_dispy)/2
	pos tx,ty : mes moji
	
	moji = "All System:"
	font "HGP教科書体",double(point-1)/100,16
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
	x = size(0) : y = size(1)
	tx = double(ginfo_dispx-x)/2 : ty = double(ginfo_dispy)/2-y
	pos tx,ty : mes moji
	
	moji = "Top Level Command"
	font "ＭＳ　Ｐゴシック",double(point-1)/(100*3),16
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
	x = size(0) : y = size(1)
	tx = double(ginfo_dispx-x)/2 : ty = double(ginfo_dispy)/4-y
	pos tx,ty : mes moji
	
	moji = "MAGI SYSTEM 1･2･3"
	font "ＭＳ　Ｐゴシック",double(point-1)/(100*3),16
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
	x = size(0) : y = size(1)
	tx = double(ginfo_dispx-x)/2 : ty = double(ginfo_dispy)*3/4
	pos tx,ty : mes moji
	
	redraw 1
	
	// ボイスの再生
	ds_open 4,dir_cur+"/voice/009.wav"
	ds_seek 4,0
	ds_play 4,0
	
	wait 500
	
	// メインウィンドウを透過処理
	;GetWindowLong hwnd , -20
	SetWindowLong hwnd , -20 , stat | 0x00080000 ; 透過設定 (GWL_EXSTYLEにWS_EX_LAYEREDを設定)
	
	for percent,100,50/*可視率*/,-1
		SetLayeredWindowAttributes hwnd , 0 , percent*255/100 , 2 ; ウィンドウの透過率を設定
		await 50
	next
	
	// ボイス再生
	ds_open 4,dir_cur+"/voice/011.wav"
	ds_seek 4,0
	ds_play 4,0
	
	wait 300
	
	// ウィンドウハンドルとそれらの座標を保存するために配列作成
	dim handle_num
	dim handle_posx
	dim handle_posy
	
	; コールバック関数の登録
	setcallbk Proc, EnumWindowProc, *OnEnumWindowProc
	
	; トップレベルウィンドウのハンドルを取得
	count = 0
	
	title "MAGISYSTEM-Beta"
	;トップレベルウィンドウのハンドルを取得
	EnumWindows varptr(Proc), 0
	
	eva_mode = 1:gosub *WindowHide ; ウィンドウを消す処理へ
	
	wait 100
	
	// ボイス再生
	ds_open 4,dir_cur+"/voice/012.wav"
	ds_seek 4,0
	ds_play 4,0
	
	wait 550
	
	// 透過ウィンドウを普通に表示
	for percent,50,100,1
		SetLayeredWindowAttributes hwnd , 0 , percent*255/100 , 2
		await 50
	next
	await 20
	// ゆっくりメインウィンドウをフェードアウト
	for percent,100,0,-1
		SetLayeredWindowAttributes hwnd , 0 , percent*255/100 , 2
		ds_setvol 5,9000-double((100-percent)*(100-percent))/5
		await 20
	next
	
	ds_stop 5,1 ; BGM停止
	
	gsel 0,-1 ; メインウィンドウを不可視化
	
	// 元に戻った時のウィンドウを作成しておく
	redraw 0
	
	color 0,0,0
	boxf
	color 230,170,15
	boxf 10,10,ginfo_dispx-10,ginfo_dispy-10
	color 0,0,0
	boxf 15,15,ginfo_dispx-15,ginfo_dispy-15
	color 230,170,15
	boxf 30,30,40,70
	boxf 50,30,60,70
	boxf ginfo_dispx-40,30,ginfo_dispx-30,70
	boxf ginfo_dispx-60,30,ginfo_dispx-50,70
	boxf 30,ginfo_dispy-70,40,ginfo_dispy-30
	boxf 50,ginfo_dispy-70,60,ginfo_dispy-30
	boxf ginfo_dispx-40,ginfo_dispy-70,ginfo_dispx-30,ginfo_dispy-30
	boxf ginfo_dispx-60,ginfo_dispy-70,ginfo_dispx-50,ginfo_dispy-30
	
	moji = "CONDITION NORMAL"
	font "HGP教科書体",double(point-1)/100,16
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
	x = size(0) : y = size(1)
	tx = double(ginfo_dispx-x)/2 : ty = double(ginfo_dispy)/2
	pos tx,ty : mes moji
	
	moji = "All Systems:"
	font "HGP教科書体",double(point-1)/100,16
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
	x = size(0) : y = size(1)
	tx = double(ginfo_dispx-x)/2 : ty = double(ginfo_dispy)/2-y
	pos tx,ty : mes moji
	
	moji = "Top-Level Command"
	font "ＭＳ　Ｐゴシック",double(point-1)/(100*3),16
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
	x = size(0) : y = size(1)
	tx = double(ginfo_dispx-x)/2 : ty = double(ginfo_dispy)/4-y
	pos tx,ty : mes moji
	
	moji = "MAGI SYSTEM 1･2･3"
	font "ＭＳ　Ｐゴシック",double(point-1)/(100*3),16
	ls=strlen(moji) : dim size,2
	GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
	x = size(0) : y = size(1)
	tx = double(ginfo_dispx-x)/2 : ty = double(ginfo_dispy)*3/4
	pos tx,ty : mes moji
	
	redraw 1
	
	;フックをセット(ボタンを押したら戻す処理へ行く設定)
	khHook *onKeyHook
	if stat=0 : dialog "フック失敗" : end
	stop

/*-----ウィンドウを消す一連の流れ(EVA)-----*/

/*-----ウィンドウを取得するおまじない-----*/
*OnEnumWindowProc
	handle = callbkarg(0)
	; 表示されているウィンドウのみを取得
	IsWindowVisible handle
	if stat {
		sdim titlename, 256
		GetWindowText handle, varptr(titlename), 256 // ウィンドウ名を取得
		// 例外のウィンドウ名を下記に追加
		if (titlename != "" && titlename != "MAGISYSTEM-Beta" && titlename != "Program Manager" && titlename != "IObit_StartMenu_Button"){
			dim rect, 4
			GetWindowRect handle, varptr(rect)
			temp = strf("%10d  ",handle) + titlename+" "+rect(0)+","+rect(1)
			
			handle_num(count) = handle
			handle_posx(count) = rect(0)
			handle_posy(count) = rect (1)
			count++
		}
	}
	return 1
/*-----ウィンドウを取得するおまじない-----*/

/*-----ウィンドウを隠す処理-----*/
*WindowHide
	hide_flag = 1 ; ウィンドウを隠したフラグ
	
	notesel data ; ウィンドウ一覧を保存する変数
	if (eva_mode == 1){ // EVAモードの場合(徐々にウィンドウが下がる処理)
		ds_play 1,1 ; ウィンドウが下がる音 再生
		repeat
			i = cnt
			success_num = 0 ; 移動したウィンドウ数
			stop_num = 0 ; 
			foreach handle_num
				IsIconic handle_num(cnt) ; 最小化されているウィンドウかどうか
				if stat=FALSE{ // 最小化されていなければ
					; デスクトップの下底と今のウィンドウのY座標が一致したら
					; 備考:ウィンドウごとに動きにラグを作るため100px移動ごとに次のウィンドウが移動します
					if (ginfo_dispy == handle_posy(cnt)+i-cnt*100):ds_stop 2,1:ds_play 2,0:continue
					; デスクトップの下底よりウィンドウのY座標が大きかったら
					if (ginfo_dispy < handle_posy(cnt)+i-cnt*100):continue
					; 100pxずらす処理
					if (i < cnt*100):continue
					; ウィンドウの位置を移動
					SetWindowPos handle_num(cnt),$0,handle_posx(cnt),handle_posy(cnt)+i-cnt*100,0,0,$15
					success_num ++ ; 移動したウィンドウ数をカウント
				}
			loop
			if (success_num == 0):break ; 移動したウィンドウがなければ抜ける
			await 10
		loop
		ds_stop 1,1 ; ウィンドウが下がる音 停止
	}
	
	// ウィンドウを隠す処理
	foreach handle_num
		SetWindowPos handle_num(cnt),$0,handle_posx(cnt),handle_posy(cnt),0,0,$97 ; ウィンドウを不可視化
		noteadd ""+handle_num(cnt)+","+handle_posx(cnt)+","+handle_posy(cnt) , -1 ; 不可視化したウィンドウを記録
		await
	loop
	
	//不可視化したウィンドウを記録しておく
	notesave dir_cur+"/backup.dat"
	return
	
/*-----ウィンドウを隠す処理-----*/

/*-----終了キーを押した時の処理-----*/
*onKeyHook
	if (khKeyCode == 27 && khStat == 1 && eva_mode == 1){ // EVAモードかつESCキーが押され続けたら
		khUnhook ; キーフックを解除
		gsel 0,2 ; メインウィンドウを可視化
		
		// メインウィンドウを徐々に表示
		for percent,0,100,1
			SetLayeredWindowAttributes hwnd , 0 , percent*255/100 , 2
			await 10
		next
		
		// 隠したウィンドウを戻す
		foreach handle_num
			SetWindowPos handle_num(cnt),$0,handle_posx(cnt),handle_posy(cnt),0,0,$55
			await
		loop
		await 100
	
		
		// ウィンドウ一覧を削除
		exist dir_cur+"/backup.dat"
		if strsize!=-1:	delete dir_cur+"/backup.dat"
		
		// メインウィンドウを徐々に透過
		for percent,100,70,-1
			SetLayeredWindowAttributes hwnd , 0 , percent*255/100 , 2
			await 50
		next
	
		// 注意書きを表示
		moji = "Press Alt + F4 Key to EXIT..."
		font "ＭＳ　Ｐゴシック",double(point-1)/(100*4),16
		ls=strlen(moji) : dim size,2
		GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
		x = size(0) : y = size(1)
		tx = double(ginfo_dispx-x)/2
		pos tx, : mes moji
		
		moji = "Programed by 3846masa"
		font "ＭＳ　Ｐゴシック",double(point-1)/(100*3),16
		ls=strlen(moji) : dim size,2
		GetTextExtentPoint32 hdc,varptr(moji),ls,varptr(size)
		x = size(0) : y = size(1)
		tx = double(ginfo_dispx-x)/2
		pos tx, : mes moji
		hide_flag = 0
		
		ds_free ; 音声の開放
		onexit goto *exit2
		stop
	}
	if (khKeyCode == 27 && khStat == 1){ // 通常モードかつESCキーが押され続けたら
		khUnhook ; キーフックを解除
		// 隠したウィンドウを戻す
		foreach handle_num
			SetWindowPos handle_num(cnt),$0,handle_posx(cnt),handle_posy(cnt),0,0,$55
			await
		loop
		
		gsel 0,1
		hide_flag = 0
	
		// ウィンドウ一覧を削除
		exist dir_cur+"/backup.dat"
		if strsize!=-1:	delete dir_cur+"/backup.dat"
		goto *exit
	}

	return
/*-----終了キーを押した時の処理-----*/

/*-----ソフト終了の処理(不具合が起きないようにするため)-----*/
*exit
	;if (eva_mode == 1):ds_free ; 音声の開放
	ds_free ; 音声の開放
	;dialog "phase1"
	if playflag=1:dsc_Close ; カメラの終了
	;dialog "phase2"
	if (hide_flag == 1){ // 隠したウィンドウを戻す
		foreach handle_num
			SetWindowPos handle_num(cnt),$0,handle_posx(cnt),handle_posy(cnt),0,0,$55
			await
		loop
	}
	;dialog "phaseend"
	end
	
*exit2
	wait 100
	end
/*-----ソフト終了の処理(不具合が起きないようにするため)-----*/